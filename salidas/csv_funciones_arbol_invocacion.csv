carga_dic_invocaciones,'(fuente_unico, lista_funciones)', 'arbol_invocacion.py', 'dic_invocaciones = {}', 'lista_agregar = []', 'linea = fuente_unico.readline()', 'while linea:', 'aux = linea.split(",")', 'n_funcion_dic = aux[0]', 'lista_agregar = lista_invocaciones(linea, lista_funciones)', 'dic_invocaciones[n_funcion_dic] = lista_agregar', 'linea = fuente_unico.readline()', 'return dic_invocaciones ', '', ''
carga_lista_funciones,'(fuente_unico)', 'arbol_invocacion.py', 'lista_funciones = []', 'linea = fuente_unico.readline()', 'while linea:', 'funcion = linea.split(",")', 'lista_funciones.append(funcion[0])', 'linea = fuente_unico.readline()', 'return lista_funciones', '', ''
contador_lineas,'(linea)', 'arbol_invocacion.py', 'lista_sin_vacios = []  ', 'lista_linea_codigo = gen_lista_lineas(linea)', '', 'for campo in lista_linea_codigo:', 'if campo != "\'\'" and campo != "\'":', 'lista_sin_vacios.append(campo)', 'return len(lista_sin_vacios)', '', ''
gen_lista_lineas,'(linea)', 'arbol_invocacion.py', 'linea = linea.rstrip("\\n")', 'lista = linea.split(".py\', ") ', 'lista_linea_codigo = lista[1].split("\', ") ', 'return lista_linea_codigo', ''
hacer_cadena_invocaciones,'(dic, funcion, cadena, nivel, dic_lineas_codigo, lista_cadena)', 'arbol_invocacion.py', '', 'nivel += 1', '', 'if len(dic[funcion]) != 0 and nivel < 5: ', 'for i in dic[funcion]:', '', 'lineas = " (" + str(dic_lineas_codigo[i]) + ") "', 'cadena.append( i + lineas)', '', 'hacer_cadena_invocaciones(dic, i, cadena, nivel, dic_lineas_codigo, lista_cadena)', 'else:', '', '', 'if len(cadena) < 5:', 'espacios_agregar = nivel - len(cadena)', 'for i in range(espacios_agregar):', 'cadena.insert(i, "")', 'print(" ---> ".join(cadena))', 'lista_cadena.append(cadena)', 'nivel = 0', 'cadena.clear()', ''
imprimir_arbol_invocacion,'(dic, dic_lineas_codigo, main)', 'arbol_invocacion.py', 'cadena = [] ', 'lista_cadena = [] ', 'for funcion in dic.keys():', 'if main in funcion:', 'flag = True', '', 'nivel = 0 ', 'cadena.append(funcion)', 'hacer_cadena_invocaciones(dic, funcion, cadena, nivel, dic_lineas_codigo, lista_cadena)', '', 'print("\\n---------------------")', ''
lista_invocaciones,'(linea, lista_funciones)', 'arbol_invocacion.py', 'lista_agregar = []', 'for funcion in lista_funciones:', 'if funcion + "(" in linea:', 'lista_agregar.append(funcion)', 'return lista_agregar', ''
load_dic_lineas_codigo,'(fuente_unico)', 'arbol_invocacion.py', 'dic_lineas_codigo = {}', 'linea = fuente_unico.readline()', 'while linea:', 'aux = linea.split(",")', 'funcion = aux[0]', 'lineas = contador_lineas(linea)', 'dic_lineas_codigo[funcion] = lineas', 'linea = fuente_unico.readline()', 'return dic_lineas_codigo', ''
main_arbol_invocacion,'(fuente_unico, main)', 'arbol_invocacion.py', 'lista_funciones = carga_lista_funciones(fuente_unico)', 'fuente_unico.seek(0)', '', 'dic_lineas_codigo = load_dic_lineas_codigo(fuente_unico)', 'fuente_unico.seek(0)', '', 'diccionario_invocaciones = carga_dic_invocaciones(fuente_unico, lista_funciones)', 'imprimir_arbol_invocacion(diccionario_invocaciones, dic_lineas_codigo, main)', ''
