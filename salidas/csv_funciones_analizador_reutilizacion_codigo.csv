carga_lista_funciones,'(fuente_unico)', 'analizador_reutilizacion_codigo.py', 'lista_funciones = []', 'linea = fuente_unico.readline()', 'while linea:', 'funcion = linea.split(",")', 'lista_funciones.append(funcion[0])', 'linea = fuente_unico.readline()', 'fuente_unico.seek(0) ', 'return lista_funciones', '', ''
cargar_matriz,'(dic_invoc_count, matriz)', 'analizador_reutilizacion_codigo.py', 'x = 0', 'for i in dic_invoc_count.keys():', '', 'lista_tuplas = dic_invoc_count[i] ', 'for tupla in lista_tuplas:', '', 'matriz[x][tupla[0]] = str(tupla[1])', '', '', 'matriz[tupla[0]][x] = "X"', '', 'x += 1 ', 'return matriz', '', ''
crear_matriz,'(ancho, alto)', 'analizador_reutilizacion_codigo.py', 'w, h = ancho, alto;', 'matriz = [[" " for x in range(w)] for y in range(h)]', 'return matriz', '', ''
escribir_analizador,'(tamaño, dic_funcion_id, matriz, ultima_fila, salida)', 'analizador_reutilizacion_codigo.py', 'escribir_cabecera(salida, tamaño)', 'escribir_cuerpo(salida, dic_funcion_id, tamaño, matriz)', 'escribir_ultima_fila(salida, ultima_fila, tamaño)', 'print("\\n\\n*Genere el archivo analizador.txt el cual se encuentra ubicado en la carpeta \'salidas_modulos\'.")', ''
escribir_cabecera,'(salida, tamaño)', 'analizador_reutilizacion_codigo.py', 'salida.write(\'{:^35}\'.format("FUNCIONES"))', 'for i in range(1, tamaño+1):', 'if i < 10:', 'num = "0" + str(i)', 'else:', 'num = str(i)', "salida.write('{:^3}'.format(str(num)))", 'salida.write("\\n")', ''
escribir_cuerpo,'(salida, dic_funcion_id, tamaño, matriz)', 'analizador_reutilizacion_codigo.py', 'x = 0', 'for funcion in dic_funcion_id:', 'salida.write(\'{:<35}\'.format(str(dic_funcion_id[funcion]) + " - " + str(funcion)))', 'for y in range(0, tamaño):', "salida.write('{:^3}'.format(str(matriz[x][y])))", 'x += 1 ', 'salida.write("\\n")', ''
escribir_ultima_fila,'(salida, ultima_fila, tamaño)', 'analizador_reutilizacion_codigo.py', 'salida.write(\'{:<35}\'.format("Total invocaciones"))', 'for i in range(0, tamaño):', "salida.write('{:^3}'.format(str(ultima_fila[i])))", ''
gen_dic_funcion_id,'(lista_funciones)', 'analizador_reutilizacion_codigo.py', 'dic_funcion_id = {}', 'for i in range(len(lista_funciones)):', 'dic_funcion_id[lista_funciones[i]] = i + 1', 'return dic_funcion_id', '', ''
gen_dic_inv_x,'(fuente_unico, lista_funciones, dic_funcion_id)', 'analizador_reutilizacion_codigo.py', 'dic_invocaciones = {}', 'lista_agregar = []', '', 'linea = fuente_unico.readline()', 'while linea:', 'aux = linea.split(",")', 'n_funcion_dic = aux[0]', '', 'lista_agregar = lista_invocaciones_id(linea, lista_funciones, dic_funcion_id)', '', 'dic_invocaciones[n_funcion_dic] = lista_agregar', 'linea = fuente_unico.readline()', 'fuente_unico.seek(0) ', 'return dic_invocaciones', '', ''
gen_dic_invoc_count,'(fuente_unico, lista_funciones, dic_funcion_id, dic_inv_x)', 'analizador_reutilizacion_codigo.py', 'dic_invoc_count = {}', 'lista_agregar = []', '', 'linea = fuente_unico.readline()', 'while linea:', 'aux = linea.split(",")', 'n_funcion_dic = aux[0]', '', 'lista_agregar = lista_invoc_count(dic_inv_x, n_funcion_dic) ', '', 'dic_invoc_count[n_funcion_dic] = lista_agregar', 'linea = fuente_unico.readline()', 'fuente_unico.seek(0) ', 'return dic_invoc_count', '', ''
gen_ultima_fila,'(matriz)', 'analizador_reutilizacion_codigo.py', 'ultima_fila = []', 'columnas = len(matriz)', 'for j in range(columnas):', '', 'suma = sum([ int(fila[j]) for fila in matriz if fila[j] not in [" ", "X"] ])', 'ultima_fila.append(suma)', 'return ultima_fila', ''
imprimir_cabecera,'(largo)', 'analizador_reutilizacion_codigo.py', 'print(\'{:^35}\'.format("FUNCIONES"), end = "")', 'for i in range(1, largo+1):', 'if i < 10:', 'num = "0" + str(i)', 'else:', 'num = str(i)', 'print(\'{:^3}\'.format(str(num)), end="")', 'print("\\n")', ''
imprimir_lineas,'(dic_funcion_id, matriz)', 'analizador_reutilizacion_codigo.py', 'x = 0', 'for funcion in dic_funcion_id:', 'print(\'{:<35}\'.format(str(dic_funcion_id[funcion]) + " - " + str(funcion)), end = "")', 'for y in range(0, len(dic_funcion_id)):', 'print(\'{:^3}\'.format(str(matriz[x][y])), end="")', 'x += 1 ', 'print("\\n")', '', ''
imprimir_todo,'(tamaño, dic_funcion_id, matriz, ultima_fila)', 'analizador_reutilizacion_codigo.py', 'imprimir_cabecera(tamaño)', 'imprimir_lineas(dic_funcion_id, matriz)', 'imprimir_ultima_fila(ultima_fila, tamaño)', '', ''
imprimir_ultima_fila,'(ultima_fila, tamaño)', 'analizador_reutilizacion_codigo.py', 'print(\'{:<35}\'.format("Total invocaciones"), end = "")', 'for i in range(0, tamaño):', 'print(\'{:^3}\'.format(str(ultima_fila[i])), end="")', '', ''
lista_invoc_count,'(dic_inv_x, funcion)', 'analizador_reutilizacion_codigo.py', 'lista_agregar = []', '', 'for i in range(len(dic_inv_x)):', 'count = dic_inv_x[funcion].count(i)', 'if count > 0 and count < 100:', 'lista_agregar.append((i, count))', 'return lista_agregar', '', ''
lista_invocaciones_id,'(linea, lista_funciones, dic_funcion_id)', 'analizador_reutilizacion_codigo.py', 'lista_agregar = []', 'for funcion in lista_funciones:', 'if funcion + "(" in linea:', 'add = dic_funcion_id[funcion] ', 'lista_agregar.append(add)', 'return lista_agregar', '', ''
main_analizador,'(fuente_unico, salida)', 'analizador_reutilizacion_codigo.py', 'lista_funciones = carga_lista_funciones(fuente_unico)', 'dic_funcion_id = gen_dic_funcion_id(lista_funciones)', 'dic_inv_x = gen_dic_inv_x(fuente_unico, lista_funciones, dic_funcion_id)', 'dic_invoc_count = gen_dic_invoc_count(fuente_unico, lista_funciones, dic_funcion_id, dic_inv_x)', '', 'tamaño = len(dic_funcion_id)', 'matriz = crear_matriz(tamaño, tamaño)', 'matriz_cargada = cargar_matriz(dic_invoc_count, matriz)', 'ultima_fila = gen_ultima_fila(matriz)', '', 'imprimir_todo(tamaño, dic_funcion_id, matriz_cargada, ultima_fila)    ', 'escribir_analizador(tamaño, dic_funcion_id, matriz_cargada, ultima_fila, salida)', ''
