caso_hashtag,'(fuente_unico, comentarios, funcion)', 'consulta_funciones.py', '', 'fuente_unico.seek(0)', 'comentarios.seek(0)', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea_f and linea_c:   ', 'funcion_linea = encontrar_funcion(linea_c) ', 'if funcion_linea == funcion:', 'lista_extra_descripcion = enc_extra_descripcion(linea_c)', 'print("\\n-----------------------------------------------")', 'print("|Funcion|: ", funcion + encontrar_param(linea_f))', 'print("|INFORMACION|:\\n---------------")', 'print(encontrar_autor(linea_c))', 'print(encontrar_descripcion(linea_c))', 'print("Funcion utilizada en el modulo: " + encontrar_modulo(linea_f) + "\\n")', 'print("|COMENTARIOS EXTRA DESCRIPCION|:")', 'for i in range(len(lista_extra_descripcion)):', 'print(lista_extra_descripcion[i].rstrip("\'").lstrip("\'"))', 'print("-----------------CODIGO--------------------")', 'lista_codigo = lista_lineas_de_codigo(linea_f)', 'for campo in range(len(lista_codigo)):', 'print(lista_codigo[campo].lstrip("\'") + "\\n")', 'print("-----------------------------------------------\\n\\n")     ', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', '', ''
caso_hashtag_todo,'(fuente_unico, comentarios)', 'consulta_funciones.py', 'fuente_unico.seek(0)', 'comentarios.seek(0)', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea_f and linea_c:', 'lista_extra_descripcion = enc_extra_descripcion(linea_c)', 'lista_codigo = lista_lineas_de_codigo(linea_f)', 'print("\\n-----------------------------------------------")', 'print("|Funcion|: ", encontrar_funcion(linea_c) + encontrar_param(linea_f))', 'print("|INFORMACION|:\\n---------------")', 'print(encontrar_autor(linea_c))', 'print(encontrar_descripcion(linea_c))', 'print("Funcion utilizada en el modulo: " + encontrar_modulo(linea_f) + "\\n")', 'print("|COMENTARIOS EXTRA DESCRIPCION|:")', 'for i in range(len(lista_extra_descripcion)):', 'print(lista_extra_descripcion[i].lstrip("\'").rstrip("\'"))', 'print("-----------------CODIGO--------------------")', 'for campo in range(len(lista_codigo)):', 'print(lista_codigo[campo].lstrip("\'").rstrip("\\n") + "\\n")', 'print("-----------------------------------------------\\n\\n")     ', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', '', ''
caso_imprimir_todo,'(fuente_unico, comentarios, arch_salida)', 'consulta_funciones.py', 'fuente_unico.seek(0)', 'comentarios.seek(0)', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea_f and linea_c:', 'funcion = encontrar_funcion(linea_c)', 'autor = encontrar_autor(linea_c)', 'descripcion = encontrar_descripcion(linea_c)', 'parametros = encontrar_param(linea_f)', 'modulo = encontrar_modulo(linea_f)', '', 'escribir_arch_salida(arch_salida, funcion, parametros, autor, descripcion, modulo)', '', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'print("* Genere el archivo \'ayuda_funciones.txt\'. Se encuentra en la carpeta \'salidas_modulos\'")', ''
caso_pregunta,'(fuente_unico, comentarios, funcion)', 'consulta_funciones.py', 'fuente_unico.seek(0)', 'comentarios.seek(0)', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea_f and linea_c:   ', 'funcion_linea = encontrar_funcion(linea_c) ', 'if funcion_linea == funcion:', 'print("\\n-----------------------------------------------")', 'print("|Funcion|: ", funcion + encontrar_param(linea_f))', 'print("|INFORMACION|:\\n---------------")', 'print(encontrar_autor(linea_c))', 'print(encontrar_descripcion(linea_c))', 'print("Funcion utilizada en el modulo: " + encontrar_modulo(linea_f))', 'print("-----------------------------------------------\\n\\n")     ', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', '', ''
caso_pregunta_todo,'(fuente_unico, comentarios)', 'consulta_funciones.py', '', 'fuente_unico.seek(0)', 'comentarios.seek(0)', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea_f and linea_c:', 'print("\\n-----------------------------------------------")', 'print("|Funcion|: " + encontrar_funcion(linea_c) + encontrar_param(linea_f))', 'print("|INFORMACION|:\\n---------------")', 'print(encontrar_autor(linea_c))', 'print(encontrar_descripcion(linea_c))', 'print("Funcion utilizada en el modulo: " + encontrar_modulo(linea_f))', 'print("-----------------------------------------------\\n\\n")     ', 'linea_f = fuente_unico.readline()', 'linea_c = comentarios.readline()', '', ''
conseguir_funcion,'(palabra)', 'consulta_funciones.py', 'if "?" in palabra:', 'aux = palabra.split("?")', 'devolver = aux[0]', 'elif "', 'aux = palabra.split("', 'devolver = aux[0]', 'else:', 'devolver = palabra', 'return devolver', ''
enc_extra_descripcion,'(linea)', 'consulta_funciones.py', 'devolver = []', 'lista = linea.split("]\',")', '', 'if len(lista) > 2:', 'comentarios_extra = lista[2].split("\',")', 'devolver = comentarios_extra', 'else:', 'devolver = ["Sin comentarios extra descripcion."]', '', 'return devolver', ''
encontrar_autor,'(linea)', 'consulta_funciones.py', 'lista = linea.split(",")', 'return lista[1].lstrip("\'[").rstrip("]\'")', ''
encontrar_descripcion,'(linea)', 'consulta_funciones.py', 'devolver = "Sin ayuda o descripcion."', 'lista = linea.split("]\', ")', 'for campo in lista:', 'if "ayuda:" in campo.lower():', 'devolver = campo.lstrip("\'[").rstrip("]\'")', 'return devolver', ''
encontrar_funcion,'(linea)', 'consulta_funciones.py', 'lista = linea.split(",")', 'return lista[0]', ''
encontrar_modulo,'(linea)', 'consulta_funciones.py', 'lista = linea.split(",")', 'for campo in lista:', 'if ".py\'" in campo:', 'devolver = campo', 'return devolver', ''
encontrar_param,'(linea)', 'consulta_funciones.py', 'lista = linea.split("\'")', 'devolver = lista[1]', 'return devolver', ''
escribir_arch_salida,'(salida, funcion, parametros, autor, descripcion, modulo)', 'consulta_funciones.py', 'max = 80', 'salida.write("-----------------------------------------------\\n")', 'escribir = "|Funcion|: " + str(funcion) + str(parametros) + "\\n"', '', 'if len(escribir) > max:', 'for i in range(0, len(escribir), max):', 'salida.write(escribir[i: i + max] + "\\n")', 'else:', 'salida.write(escribir + "\\n")', 'salida.write("|INFORMACION|:\\n---------------\\n")', 'salida.write(autor + "\\n")', '', 'if len(descripcion) > max:', 'for i in range(0, len(descripcion), max):', 'salida.write(descripcion[i: i + max] + "\\n")', 'else:', 'salida.write(descripcion + "\\n")', '', 'escribir = "Funcion utilizada en el modulo: " + str(modulo) + "\\n"', 'if len(escribir) > max:', 'for i in range(0, len(escribir), max):', 'salida.write(escribir[i: i + max] + "\\n")', 'else:', 'salida.write(escribir + "\\n")', 'salida.write("-----------------------------------------------\\n\\n")', '', ''
lista_de_funciones,'(fuente_unico)', 'consulta_funciones.py', 'lista_funciones = []', '', 'linea_f = fuente_unico.readline()', 'while linea_f:', 'aux = linea_f.split(",")', 'lista_funciones.append(aux[0])', 'linea_f = fuente_unico.readline()', '', 'return lista_funciones', ''
lista_lineas_de_codigo,'(linea)', 'consulta_funciones.py', 'lista_sin_vacios = []  ', 'linea = linea.rstrip("\\n")', 'lista = linea.split(".py\', ") ', 'lista_linea_codigo = lista[1].split("\', ") ', '', 'for campo in lista_linea_codigo:', 'if campo != "\'\'" and campo != "\'":', 'lista_sin_vacios.append(campo)', '', 'return lista_sin_vacios', '', ''
main_consulta_funciones,'(fuente_unico, comentarios, arch_salida, lista_funciones)', 'consulta_funciones.py', 'print("\'funcion + ?\' para ver autor, ayuda, parametros y modulo.")', 'print("\'funcion + ', 'print("\'?todo\' para ver el autor, ayuda, parametros y modulos de TODAS las funciones.")', 'print("\'', 'print("\'imprimir ?todo\' para guardar todos los datos en ayuda_funciones.txt \\n")', '', 'print("(Para terminar toque enter sin ingresar nada.)")', 'entrada = str(input("Funcion: ")) ', 'while entrada != "":', 'funcion = conseguir_funcion(entrada)', '', 'if funcion in lista_funciones and entrada.endswith("?"):', 'caso_pregunta(fuente_unico, comentarios, funcion)', 'elif funcion in lista_funciones and entrada.endswith("', 'caso_hashtag(fuente_unico, comentarios, funcion)', 'elif entrada == "?todo":', 'caso_pregunta_todo(fuente_unico, comentarios)', 'elif entrada == "', 'caso_hashtag_todo(fuente_unico, comentarios)', 'elif entrada == "imprimir ?todo":', 'caso_imprimir_todo(fuente_unico, comentarios, arch_salida)', 'else:', 'print("\'funcion + ?\' para ver autor, ayuda, parametros y modulo.")', 'print("\'funcion + ', 'print("\'funcion + ?todo\' para ver el autor, ayuda, parametros y modulos de TODAS las funciones.")', 'print("\'funcion + ', 'print("\'imprimir ?todo\' para guardar todos los datos en ayuda_funciones.txt")', '', 'print("(Para terminar toque enter sin ingresar nada.)")', 'entrada = str(input("Funcion: ")) ', ''
mostrar_cuadro,'(lista_funciones)', 'consulta_funciones.py', 'i = 0', 'print("----------------------TABLA DE FUNCIONES--------------------------")', 'while len(lista_funciones) % 5 != 0:', 'lista_funciones.append(" ") ', 'while i < len(lista_funciones):', 'print("|{:^30}|{:^30}|{:^30}|{:^30}|{:^30}|\\n".format(lista_funciones[i], lista_funciones[i+1], lista_funciones[i+2], lista_funciones[i+3], lista_funciones[i+4]))', 'i += 5', 'print("\\n")', ''
