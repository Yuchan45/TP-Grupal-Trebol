buscar_due√±o,'(linea)', 'informacion_desarrollador.py', 'lista = linea.split(",")', 'return lista[1]', ''
buscar_funcion,'(linea)', 'informacion_desarrollador.py', 'lista = linea.split(",")', 'return lista[0]', '', ''
calc_porcentaje,'(total_lineas, lineas_funcion)', 'informacion_desarrollador.py', 'porcentaje = int(round((lineas_funcion * total_lineas) / 100, 0))', 'return porcentaje', ''
calc_total_lineas,'(dic_participacion)', 'informacion_desarrollador.py', 'total_lineas = 0', 'for autor in dic_participacion:', 'dic_part_ord = dict(sorted(dic_participacion[autor].items(), key=lambda item: item[1], reverse=True))', 'for funcion in dic_part_ord:', 'total_lineas += dic_part_ord[funcion]', 'return total_lineas', ''
carga_dic_participacion,'(fuente_unico, comentarios)', 'informacion_desarrollador.py', 'dic_participacion = {}', 'linea = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'while linea:', '', 'au = buscar_due√±o(linea_c).lstrip("\'").rstrip("\'")', 'funcion = buscar_funcion(linea)', 'cant_lineas = count_lineas_codigo(linea)', '', 'if au not in dic_participacion:', 'dic_participacion[au] = {funcion: cant_lineas}', 'else:', 'dic_participacion[au].update({funcion: cant_lineas})   ', 'linea = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'return dic_participacion', ''
count_lineas_codigo,'(linea)', 'informacion_desarrollador.py', 'lista_sin_vacios = []  ', 'lista_linea_codigo = gen_lista_linea_codigo(linea)', '', 'for campo in lista_linea_codigo:', 'if campo != "\'\'" and campo != "\'":', 'lista_sin_vacios.append(campo)', '', 'return len(lista_sin_vacios)', '', ''
escribir_info_desarrollador,'(arch_salida, total_lineas, dic_participacion)', 'informacion_desarrollador.py', 'contador = 0', 'arch_salida.write("Informe de Desarrollo Por Autor \\n")', 'for autor in dic_participacion:', 'arch_salida.write(autor + "\\n")', 'arch_salida.write(\'{:^30}{:^10}\'.format("FUNCION", "L√\xadneas") + "\\n")', '', 'arch_salida.write(\'{:^30}{:^10}\'.format("-----------------------------", "----------") + "\\n")', 'dic_part_ord = dict(sorted(dic_participacion[autor].items(), key=lambda item: item[1], reverse=True))', 'for funcion in dic_part_ord:', 'arch_salida.write(\'{:^30}{:^10}\'.format(funcion, dic_part_ord[funcion]) + "\\n")', 'contador += dic_part_ord[funcion]', 'arch_salida.write("\\n")', 'porcentaje = calc_porcentaje(total_lineas, contador)', 'arch_salida.write(\'{:^30}{:^10}{:^10}\'.format(str(len(dic_part_ord)) + " Funciones - Lineas", contador, str(porcentaje) + "%") + "\\n")   ', 'contador = 0', 'arch_salida.write(\'{:^30}{:^10}\'.format("-----------------------------", "----------") + "\\n")', 'arch_salida.write("\\n")', ''
gen_lista_linea_codigo,'(linea)', 'informacion_desarrollador.py', 'linea = linea.rstrip("\\n")', 'lista = linea.split(".py\', ") ', 'lista_linea_codigo = lista[1].split("\', ") ', '', 'return lista_linea_codigo', '', ''
imprimir_info_desarrollador,'(total_lineas, dic_participacion)', 'informacion_desarrollador.py', 'contador = 0', 'print("Informe de Desarrolo Por Autor \\n")', 'for autor in dic_participacion:', 'print(autor)', 'print(\'{:^30}{:^10}\'.format("FUNCION", "L√\xadneas"))', 'print(\'{:^30}{:^10}\'.format("-----------------------------", "----------"))', 'dic_part_ord = dict(sorted(dic_participacion[autor].items(), key=lambda item: item[1], reverse=True))', 'for funcion in dic_part_ord:', "print('{:^30}{:^10}'.format(funcion, dic_part_ord[funcion]))", 'contador += dic_part_ord[funcion]', 'print("\\n")', 'porcentaje = calc_porcentaje(total_lineas, contador)', 'print(\'{:^30}{:^10}{:^10}\'.format(str(len(dic_part_ord)) + " Funciones - Lineas", contador, str(porcentaje) + "%"))   ', 'contador = 0', 'print(\'{:^30}{:^10}\'.format("-----------------------------", "----------"))', 'print("\\n")', ''
main_informacion_desarrollador,'(fuente_unico, comentarios, salida):  ', 'informacion_desarrollador.py', 'dic_participacion = carga_dic_participacion(fuente_unico, comentarios)', 'total_lineas = calc_total_lineas(dic_participacion)', 'imprimir_info_desarrollador(total_lineas, dic_participacion)', 'escribir_info_desarrollador(salida, total_lineas, dic_participacion)', 'print("*Genere el participacion.txt, ubicado en la carpeta de salidas_modulos")', ''
