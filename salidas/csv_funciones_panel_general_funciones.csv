buscar_due침o,'(linea)', 'panel_general_funciones.py', 'lista = linea.split(",")', 'return lista[1]', '', ''
buscar_funcion_modulo,'(linea)', 'panel_general_funciones.py', 'lista = linea.split(",")', 'for campo in lista:', 'if ".py\'" in campo:', 'devolver = lista[0] + campo.rstrip("\'")', 'return devolver.replace(" \'", ".")', ''
count_comentarios,'(linea)', 'panel_general_funciones.py', 'lista = linea.split("]\',")', '', 'if len(lista) > 2:', 'comentarios_extra = lista[2].split("\',")', 'devolver = len(comentarios_extra)', 'else:', 'devolver = 0', 'return devolver', '', ''
count_ifs,'(linea)', 'panel_general_funciones.py', 'contador = 0', 'lista_linea_codigo = gen_lista_linea_codigo(linea)', 'for campo in lista_linea_codigo:', '', 'if "if " in campo or "elif " in campo: ', 'contador += 1', 'return contador', '', ''
count_invocaciones,'(fuente_unico)', 'panel_general_funciones.py', 'l_funciones = []', 'dic_contador = {}', 'fuente_unico.seek(0)', 'linea = fuente_unico.readline()', '', 'while linea:', 'splits = linea.split(",")', 'l_funciones.append(splits[0])', 'linea = fuente_unico.readline()', '', 'for i in range(len(l_funciones)):', 'fuente_unico.seek(0)', 'linea = fuente_unico.readline()', 'while linea:', 'if (l_funciones[i] + "(") in linea:', 'if l_funciones[i] in dic_contador:', 'dic_contador[l_funciones[i]] += 1', 'else:', 'dic_contador[l_funciones[i]] = 0', 'linea = fuente_unico.readline()', '', 'if l_funciones[i] not in dic_contador:', 'dic_contador[l_funciones[i]] = 0', '', 'return dic_contador', ''
count_lineas_codigo,'(linea)', 'panel_general_funciones.py', 'lista_sin_vacios = []  ', 'lista_linea_codigo = gen_lista_linea_codigo(linea)', '', 'for campo in lista_linea_codigo:', 'if campo != "\'\'" and campo != "\'":', 'lista_sin_vacios.append(campo)', '', 'return len(lista_sin_vacios)', '', ''
count_palabra,'(linea, palabra_buscada)', 'panel_general_funciones.py', '', 'buscar = palabra_buscada + " " ', 'contador = 0', 'lista_linea_codigo = gen_lista_linea_codigo(linea)', 'for campo in lista_linea_codigo:', 'if buscar in campo: ', 'contador += 1', 'return contador', ''
count_parametros,'(linea)', 'panel_general_funciones.py', 'lista = linea.split("\'")', 'devolver = lista[1].split(",")', 'return len(devolver)', ''
escribir_panel_general,'(arch_salida, funcion, parametros, lineas, invocaciones, returns, ifs, fors, whiles, breaks, exits, coments, ayudas, autores)', 'panel_general_funciones.py', 'escribir = funcion + ", " + str(parametros) + ", " + str(lineas) + ", " + str(invocaciones)+ ", " + str(returns) + ", " + str(ifs) + ", " + str(fors) + ", " + str(whiles) + ", " + str(breaks) + ", " + str(exits) + ", " + str(coments) + ", " + ayudas + ", " + autores + "\\n"', 'arch_salida.write(escribir)', '', ''
gen_lista_linea_codigo,'(linea)', 'panel_general_funciones.py', 'linea = linea.rstrip("\\n")', 'lista = linea.split(".py\', ") ', 'lista_linea_codigo = lista[1].split("\', ") ', 'return lista_linea_codigo', '', ''
hay_ayuda,'(linea)', 'panel_general_funciones.py', 'lista = linea.split(",")', 'if lista[2] == " \'[Ayuda: Sin ayuda]\'":', 'devolver = "NO"', 'else:', 'devolver = "SI"', 'return devolver', ''
main_panel_general_funciones,'(fuente_unico, comentarios, arch_salida)', 'panel_general_funciones.py', 'dic_invocaciones = count_invocaciones(fuente_unico)', 'fuente_unico.seek(0)', 'linea = fuente_unico.readline()', 'linea_c = comentarios.readline()', 'arch_salida.write("FUNCION, PARAMETROS, LINEAS, INVOCACIONES, RETURNS, IF, FOR, WHILE, BREAKS, EXITS, COMENTS, AYUDAS, AUTORES\\n")', 'print(\'{:^65}{:^10}{:^10}{:^10}{:^10}{:^10}{:^5}{:^10}{:^10}{:^10}{:^10}{:^10}{:^25}\'.format("FUNCION", "Par치metros", "L츞xadneas","Invocaciones","Returns","If/elif","for","while","break","Exit","Coment","Ayuda", "Autor"))', '', 'while linea:', '', 'l_funcion_actual = linea.split(",")', 'funcion_actual = l_funcion_actual[0]', 'escribir_panel_general(arch_salida, buscar_funcion_modulo(linea), count_parametros(linea), count_lineas_codigo(linea), dic_invocaciones[funcion_actual], count_palabra(linea, "return"), count_ifs(linea), count_palabra(linea, "for"), count_palabra(linea, "while"), count_palabra(linea, "break"), count_palabra(linea, "exit"), count_comentarios(linea_c), hay_ayuda(linea_c), buscar_due침o(linea_c))', 'print(\'{:^65}{:^10}{:^10}{:^10}{:^10}{:^10}{:^5}{:^10}{:^10}{:^10}{:^10}{:^10}{:^25}\'.format(buscar_funcion_modulo(linea), count_parametros(linea), count_lineas_codigo(linea), dic_invocaciones[funcion_actual],count_palabra(linea, "return"),count_ifs(linea),count_palabra(linea, "for"),count_palabra(linea, "while"),count_palabra(linea, "break"),count_palabra(linea, "exit"),count_comentarios(linea_c),hay_ayuda(linea_c), buscar_due침o(linea_c))) ', 'linea = fuente_unico.readline()', 'linea_c = comentarios.readline()', '', 'print("-------------------------------------------------------")', 'print("\\nGenere el panel general.csv")', 'print("*Los datos han sido registrados en panel_general.csv, ubicado en la carpeta de salidas_modulos")', ''
